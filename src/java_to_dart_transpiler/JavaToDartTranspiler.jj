options {
  static = true;
}

PARSER_BEGIN(JavaToDartTranspiler)

import java.io.*;
import java.util.*;

public class JavaToDartTranspiler {
  public static void main(String[] args) throws Exception {
    JavaToDartTranspiler parser = new JavaToDartTranspiler(System.in);
  }
}

PARSER_END(JavaToDartTranspiler)

TOKEN : {
  <IDENTIFIER: (["a"-"z", "A"-"Z"])+(["a"-"z", "A"-"Z", "0"-"9", "_"])*>
| <INTEGER_LITERAL: (["0"-"9"])+>
| <STRING_LITERAL: "\"" (~["\""])* "\"">
| <WHITESPACE: (" " | "\t" | "\r" | "\n")>
| <IF: "if">
| <ELSE: "else">
| <FOR: "for">
| <RETURN: "return">
| <VOID: "void">
| <INT: "int">
| <STRING: "String">
| <BOOLEAN: "boolean">
| <TRUE: "true">
| <FALSE: "false">
| <PLUS: "+">
| <MINUS: "-">
| <MULTIPLY: "*">
| <DIVIDE: "/">
| <MODULO: "%">
| <AND: "&&">
| <OR: "||">
| <EQUALS: "==">
| <NOT_EQUALS: "!=">
| <LESS_THAN: "<">
| <LESS_THAN_EQUALS: "<=">
| <GREATER_THAN: ">">
| <GREATER_THAN_EQUALS: ">=">
| <ASSIGN: "=">
| <SEMICOLON: ";">
| <LEFT_BRACE: "{">
| <RIGHT_BRACE: "}">
| <LEFT_PAREN: "(">
| <RIGHT_PAREN: ")">
| <LEFT_BRACKET: "[">
| <RIGHT_BRACKET: "]">
}

void declaration() :
{}
{
  type() <IDENTIFIER> ( <ASSIGN> expression() )? <SEMICOLON>
}

void type() :
{}
{
  <INT>
| <STRING>
| <BOOLEAN>
}

void expression() :
{}
{
  logicalExpression()
}

void logicalExpression() :
{}
{
  relationalExpression() ( ( <AND> | <OR> ) relationalExpression() )*
}

void relationalExpression() :
{}
{
  additiveExpression() ( ( <LESS_THAN> | <LESS_THAN_EQUALS> | <GREATER_THAN> | <GREATER_THAN_EQUALS> | <EQUALS> | <NOT_EQUALS> ) additiveExpression() )*
}

void additiveExpression() :
{}
{
  multiplicativeExpression() ( ( <PLUS> | <MINUS> ) multiplicativeExpression() )*
}

void multiplicativeExpression() :
{}
{
  unaryExpression() ( ( <MULTIPLY> | <DIVIDE> | <MODULO> ) unaryExpression() )*
}

void unaryExpression() :
{}
{
  <PLUS> unaryExpression()
| <MINUS> unaryExpression()
| primaryExpression()
}

void primaryExpression() :
{}
{
  <INTEGER_LITERAL>
| <STRING_LITERAL>
| <TRUE>
| <FALSE>
| <IDENTIFIER>
| <LEFT_PAREN> expression() <RIGHT_PAREN>
}

void ifStatement() :
{}
{
  <IF> <LEFT_PAREN> expression() <RIGHT_PAREN> block() ( <ELSE> block() )?
}

void block() :
{}
{
  <LEFT_BRACE> statement* <RIGHT_BRACE>
}

void statement() :
{}
{
  block()
| ifStatement()
| forStatement()
| returnStatement()
| expression() <SEMICOLON>
| declaration()
}

void forStatement() :
{}
{
  <FOR> <LEFT_PAREN> (declaration() | expression() <SEMICOLON>) expression() <SEMICOLON> expression() <RIGHT_PARE> block()
}

void returnStatement() :
{}
{
  <RETURN> expression() <SEMICOLON>
}
