options {
DEBUG_PARSER=true;
}


PARSER_BEGIN(JavaToDartTranspiler)
package java_to_dart_transpiler;

import java.io.*;
import java.util.*;


public class JavaToDartTranspiler {
  public static void main(String[] args) throws Exception {
    String caminhoDoArquivo = "input.txt";
        try (BufferedReader br = new BufferedReader(new InputStreamReader(
                JavaToDartTranspiler.class.getResourceAsStream("/java_to_dart_transpiler/input.txt")))) {
            String linha;
            String inputString="";
            while ((linha = br.readLine()) != null) {
                inputString+=linha;
            }
			StringReader stringReader = new StringReader(inputString);
			JavaToDartTranspiler parser = new JavaToDartTranspiler(stringReader);
			String result=parser.codeBlock();
			
            System.out.println("\n"+result);
            BufferedWriter writer =  new BufferedWriter(new FileWriter("src/java_to_dart_transpiler/output.txt")); 
            writer.write(result);
            writer.close();
            	
        } catch (IOException e) {
            e.printStackTrace();
        }
  }

  static HashMap<String, String> symbolTable = new HashMap<>();

  public static void addVariable(String type, String identifier) throws ParseException {
    if (symbolTable.containsKey(identifier)) {
      throw new ParseException("Variavel " + identifier + " ja foi declarada.");
    }
    symbolTable.put(identifier, type);
  }

  public static String checkVariableAndReturnType(String identifier) throws ParseException {
    if (!symbolTable.containsKey(identifier)) {
      throw new ParseException("Variavel " + identifier + " nao foi declarada.");
    }
    return symbolTable.get(identifier);
  }

//  public changeVariable(String type,String identifier) throws ParseException {
//	checkVariable(identifier);
//	String typeName = symbolTable.get(identifier);
//	if(typeName!=type) {
//		throw new ParseException("Variavel " + identifier + " nao foi declarada.");
//	}
// }
 
}
PARSER_END(JavaToDartTranspiler)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
<READ : "newScanner(System.in).next()">
| < PRINT : "System.out.println">
| < IFSYMBOL : "if" >
| < ELSESYMBOL : "else" >
| < FORSYMBOL : "for" >
| < WHILESYMBOL : "while" >
| < RETURNSYMBOL : "return" >
| < VOIDSYMBOL : "void" >
| < INTSYMBOL : "int" >
| < STRINGSYMBOL : "String" >
| < BOOLEAN : "boolean" >
| < TRUE : "true" >
| < FALSE : "false" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MODULO : "%" >
| < AND : "&&" >
| < OR : "||" >
| < EQUALS : "==" >
| < NOT_EQUALS : "!=" >
| < LESS_THAN : "<" >
| < LESS_THAN_EQUALS : "<=" >
| < GREATER_THAN : ">" >
| < GREATER_THAN_EQUALS : ">=" >
| < ASSIGN : "=" >
| < SEMICOLON : ";" >
| < LEFT_BRACE : "{" >
| < RIGHT_BRACE : "}" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < LEFT_BRACKET : "[" >
| < RIGHT_BRACKET : "]" >
| < IDENTIFIER : ([ "a"-"z", "A"-"Z" ])+ ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
| < INTEGER_LITERAL : ([ "0"-"9" ])+ >
| < STRING_LITERAL : "\"" (~[ "\"" ])* "\"" >
}

String type():
{
  String code = "";
}
{
  (
    <INTSYMBOL> {code = "int";}
  | <STRINGSYMBOL> {code = "String";}
  | <BOOLEAN> {code = "bool";}
  )
  {return code;}
}

String compareBooleanOperator(): {String code="";} { 
 (
   <EQUALS> {code+=token.image;}
| <NOT_EQUALS> {code+=token.image;}
| <LESS_THAN> {code+=token.image;}
| <LESS_THAN_EQUALS> {code+=token.image;}
| <GREATER_THAN> {code+=token.image;}
| <GREATER_THAN_EQUALS> {code+=token.image;}
)
{return code;}
}

String algebricOperator(): {String code="";} {
  (<PLUS> {code+=token.image;}
| <MINUS> {code+=token.image;}
| <MULTIPLY> {code+=token.image;}
| <DIVIDE> {code+=token.image;}
| <MODULO> {code+=token.image;}
) {return code; }
}

String booleanOperator(): {String code="";} { 
 (
   <AND> {code+=token.image;}
| <OR> {code+=token.image;}
 )
{return code;}
}

String compareBoolean():{String code="";}{
     (
        <INTEGER_LITERAL> {code += token.image;}
        compareBooleanOperator(){code+= " " + token.image + " ";}
        <INTEGER_LITERAL> {code += token.image;}
        (
            compareBooleanOperator() {code += " " + token.image + " ";}
            <INTEGER_LITERAL> {code += token.image;}
        )*
    )
    {return code;}
}

String booleanRepresentation(): {String code="",compare="";}{
 (
  	<TRUE> {code="true";}
 	|<FALSE> {code="false";}
 	|compare = compareBoolean() {code=compare;}
 )
 {return code;}
}

String booleanExpression(): {String code="",operatorLoop,booLoop;} {
 (
        (<TRUE> | <FALSE>) {code+=token.image;}
        (
            operatorLoop = booleanOperator() {code += " " + operatorLoop + " ";}
            booLoop = booleanRepresentation() {code += booLoop;}
        )*
    )
  {
    return code;
  }
}

String algebricExpression(): {String code="";} {
    (
        <INTEGER_LITERAL> {code += token.image;}
        (
            algebricOperator() {code += " " + token.image + " ";}
            <INTEGER_LITERAL> {code += token.image;}
        )*
    )
    {return code;}
}

String stringExpression(): {String code="";} {
	(
        <STRING_LITERAL> {code += token.image;}
        (
            <PLUS> {code += " " + token.image + " ";}
            <STRING_LITERAL> {code += token.image;}
        )*
    )
    {return code;}
}

String functionExpression(): {String code="";} {
(
 <READ> {code+="stdin.readLineSync()";})

{ return code;}
}

String[] primaryExpression():
{String code="",ex="";
String exType="";
String possibleId=null;
}
{
 (   ex = algebricExpression(){code=ex;exType="int";}
| ex = booleanExpression() {code=ex;exType="bool";}
| ex = stringExpression() {code=ex;exType="String";}
| ex = functionExpression() {code=ex;exType="function";}
| <IDENTIFIER> {code=token.image;possibleId=token.image;}
) {
  if(possibleId!=null) {
	String idType = checkVariableAndReturnType(possibleId);
	exType = idType;
  }
  String[] arr = {code,exType};
  return arr;}
}

String declaration():
{
  String code = "",typeValue="",id="";
  String[] ex=null;
}
{
(  typeValue=type() {code += typeValue + " ";}
  <IDENTIFIER > {id=token.image;code += token.image;}
  (    <ASSIGN> {code += " = ";}
    ex = primaryExpression() {code += ex[0];}
  )?
  <SEMICOLON> {code += ";\n";}
) {
	addVariable(typeValue,id);
	if(ex!=null){
		String exType = ex[1];
	    if(typeValue!=exType && exType!="function") {
	    	throw new ParseException("A variavel com nome " + id + " foi declarada como sendo do tipo " + typeValue + " mas a expression declarada foi do tipo " + exType);
		}
	}
	return code;
  }
}

String atribution(): {String code="",id="";String[] ex;}
{
  (    <IDENTIFIER> {code+=token.image;id=token.image;}
 	<ASSIGN> {code+=token.image;}
 	ex = primaryExpression() {code += ex[0];}
 	<SEMICOLON> {code += ";\n";}
  )
  {
	String idType = checkVariableAndReturnType(id);
	String exType = ex[1];
	if(idType!=exType && exType!="function") {
	 throw new ParseException("Tentou atribuir um valor do tipo " + exType + " para a variavel de nome " + id + " que foi declarada como sendo do tipo " + idType);
	}
	return code;
  }	
}

String printStatement(): {String code="";String[] ex;} {
	(
	<PRINT> {code+="print";}
	<LEFT_PAREN> {code+=token.image;}
	ex = primaryExpression() {code+=ex[0];}
	<RIGHT_PAREN> {code+=token.image;}
	<SEMICOLON> {code += ";\n";}
	) {return code;}
}

String statement():
{String code="",v="";}
{
 (
   v = declaration(){code=v;}
| v = condition() {code=v;}
|  v = whileLoop() {code=v;}
| v = atribution() {code=v;}
|  v = printStatement() {code=v;}
| (
	<READ> {v="stdin.readLineSync()";}
	<SEMICOLON> {v+=";\n";}
  ) {code=v;}
) {return code;}
}

String codeBlock(): {String code="",stats="";}{
(stats=statement() {code+=stats;})*
{return code;}
}

String condition():{String code="",block="",boo="",blockElse="";}{
( <IFSYMBOL> {code+=token.image;}
<LEFT_PAREN> {code+=token.image;}
boo = booleanExpression() {code+=boo;}
<RIGHT_PAREN> {code+=token.image;}
<LEFT_BRACE> {code+=token.image+"\n";}
block=codeBlock() {code+=block;}
<RIGHT_BRACE> {code+=token.image+"\n";}
(
  <ELSESYMBOL> {code+=token.image;}
  <LEFT_BRACE> {code+=token.image+"\n";}
	blockElse=codeBlock() {code+=blockElse;}
	<RIGHT_BRACE> {code+=token.image+"\n";})?
) {return code;}
}

//String forLoop(): {String code,block,dec,boo;} {
//<FORSYMBOL>{code+=token.image;}
//<LEFT_PAREN>{code+=token.image;}
//dec = declaration() {code+=dec;}
//(
// boo=booleanExpression() {code+=boo;}
// <SEMICOLON> {code += ";";}
//)
//
//}

String whileLoop(): {String code="",block="",boo="",blockElse="";} {
(
 <WHILESYMBOL> {code+=token.image;}
<LEFT_PAREN> {code+=token.image;}
boo = booleanExpression() {code+=boo;}
<RIGHT_PAREN> {code+=token.image;}
<LEFT_BRACE> {code+=token.image+"\n";}
block=codeBlock() {code+=block;}
<RIGHT_BRACE> {code+=token.image+"\n";}
) {return code;}
}
